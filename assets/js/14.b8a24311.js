(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{360:function(s,n,a){"use strict";a.r(n);var e=a(43),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"es6-语法总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-语法总结"}},[s._v("#")]),s._v(" ES6 语法总结")]),s._v(" "),a("h5",{attrs:{id:"新的声明方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的声明方式"}},[s._v("#")]),s._v(" 新的声明方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("全局声明：var\n局部声明：let const\n优点：减少环境污染\n区别：\n1. var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h5",{attrs:{id:"变量的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的解构赋值"}},[s._v("#")]),s._v(" 变量的解构赋值")]),s._v(" "),a("p",[s._v("==数组的解构赋值==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('letl  [a,b,c]=[1,2,3];\nlet [a, [b, c], d] = [1, [2, 3], 4]; //两边的结构必须一样\nlet [foo = true] =[];\nconsole.log(foo); //控制台打印出true\nlet [a, b = "wgg"] = ["王", undefined]; // b还是取默认值 相当于没有赋值\nlet [a, b = "wgg"] = ["王", null]; // b是取null 相当于为空 \'\'\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("==对象的解构赋值==")]),s._v(" "),a("p",[s._v("数组解构是根据位置解构 对象是根据 key 值解构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let {foo,bar} = {foo:'JSPang',bar:'技术胖'};\nconsole.log(foo+bar); //控制台打印出了“JSPang技术胖”\n\nlet ber;\n({ ber } = { ber: \"wang\" }); // 必须加括号  否则报错\nconsole.log(ber);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("==字符串解构==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let [a, b, c, d, e] = ["wangg"];\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nconsole.log(d);\nconsole.log(e);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h5",{attrs:{id:"扩展运算符和-rest-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符和-rest-运算符"}},[s._v("#")]),s._v(" 扩展运算符和 rest 运算符")]),s._v(" "),a("p",[s._v("==对象扩展运算符（…）==")]),s._v(" "),a("blockquote",[a("p",[s._v("当编写一个方法时，我们允许它传入的参数是不确定的。这时候可以使用对象扩展运算符来作参数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function wgg(...arg) {\n  console.log(arg[0]); // 1\n  console.log(arg[1]); // 2\n  console.log(arg[2]); // 3\n  console.log(arg[3]); // undefined\n}\nwgg(1, 2, 3);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("==扩展运算符的用处==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let arr1 = ["www", "jspang", "com"];\n\nlet arr2 = arr1;\narr2.push("zhui");\nconsole.log(arr1);  // 此时arr1被改变了["www", "jspang", "com", "zhui"]  因为我们这是对内存堆栈的引用，而不是真正的赋值\n\nlet arr2 = [...arr1]; // 只追加arr1里面的元素给arr2 不是把整个数组给arr2\narr2.push("zhui");\nconsole.log(arr1); // ["www", "jspang", "com"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("==rest 运算符==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function rest(a, ...arg) {\n  console.log(a); // b\n  console.log(arg.length); // 4  默认取剩余不确定的参数\n  for (let val of arg) {\n    console.log(val); //  1  12 3  4  不用原始的for in 循环\n  }\n}\nrest("b", 1, 12, 3, 4);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h5",{attrs:{id:"字符串模版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串模版"}},[s._v("#")]),s._v(" 字符串模版")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let a = "我叫";\nlet b = `${a}王果果呀,<br><b>哈哈哈</b>`;\ndocument.write(b);\ndocument.write("王念念||".repeat(3));\n// 支持运算符\nlet a=1;\nlet b=2;\nlet result=`${a+b}`;\ndocument.write(result);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("==字符串查找==")]),s._v(" "),a("ul",[a("li",[s._v("includes")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let jspang='技术胖';\nlet blog = '非常高兴你能看到这篇文章，我是你的老朋友技术胖。这节课我们学习字符串模版。';\ndocument.write(blog.includes(jspang));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("需要注意的是：starts 和 ends 后边都要加 s")])]),s._v(" "),a("ul",[a("li",[s._v("判断开头是否存在")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("blog.startsWith(jspang);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("判断结尾是否存在")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("blog.endsWith(jspang);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("复制字符串")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("document.write('jspang|'.repeat(3));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"es6-中新增的数组知识（1）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-中新增的数组知识（1）"}},[s._v("#")]),s._v(" ES6 中新增的数组知识（1）")]),s._v(" "),a("p",[s._v("==JSON 数组格式转换==")]),s._v(" "),a("ul",[a("li",[s._v("Array.from")]),s._v(" "),a("li",[s._v("Array.of()")]),s._v(" "),a("li",[s._v("find( )实例方法")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("所谓的实例方法就是并不是以 Array 对象开始的，而是必须有一个已经存在的数组，然后使用的方法，这就是实例方法,这里的 find 方法是从数组中查找。在 find 方法中我们需要传入一个匿名函数，函数需要传入三个参数：value：表示当前查找的值。\nindex：表示当前查找的数组索引。\narr：表示当前数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' let wgg = {\n  "0": "王",\n  "1": "年",\n  "2": "念",\n  length: 3 // 加上这个length属性  就可以转换成数组\n};\nconsole.log(Array.from(wgg)); // ["王", "年", "念"]\n---------\nlet arr = Array.of(3, 4, 5, 6);\nconsole.log(arr); // [3, 4, 5, 6]\n------------\nlet arr=[1,2,3,4,5,6,7,8,9];\nconsole.log(arr.find(function(value,index,arr){\n    return value > 5;\n}))  // 控制台输出了6，说明找到了符合条件的值，并进行返回了，如果找不到会显示undefined。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h5",{attrs:{id:"es6-中新增的数组知识（2）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-中新增的数组知识（2）"}},[s._v("#")]),s._v(" ES6 中新增的数组知识（2）")]),s._v(" "),a("ul",[a("li",[s._v("fill( )实例方法 【作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置】")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let arr3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\narr3.fill("jspang", 2, 5);\nconsole.log(arr3); // [0, 1, "jspang", "jspang", "jspang", 5, 6, 7, 8, 9]  索引为2开始 索引为5结束 索引为5就没有了\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("==数组的遍历==")]),s._v(" "),a("blockquote",[a("p",[s._v("for…of 的循环可以避免我们开拓内存空间，增加代码运行效率，所以建议大家在以后的工作中使用 for…of 循环。有的小伙伴会说了，反正最后要转换成 ES5，没有什么差别，但是至少从代码量上我们少打了一些单词，这就是开发效率的提高。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','大胖逼逼叨']\n\nfor (let item of arr){\n    console.log(item);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("同时输出数组的内容和索引：我们用 entries()这个实例方法，配合我们的 for…of 循环就可以同时输出内容和索引了。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 此方法可以输出索引加item值\nlet wggh = ["wang", "nian", "hhh"];\nfor (let [index, val] of wggh.entries()) {\n  console.log(index + ":" + val);\n}\n--------\n// 此方法可以输出index值\nfor (let index of arr.keys()) {\n  console.log(index);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h5",{attrs:{id:"es6-中的函数和数组补漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-中的函数和数组补漏"}},[s._v("#")]),s._v(" ES6 中的函数和数组补漏")]),s._v(" "),a("p",[s._v("==对象的函数解构==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 对象的解构赋值   免得打 json.a  json.b\nlet json = {\n  a: "王",\n  b: "念念"\n};\n//  fun 里面的形参 必须和json 里面的数据一样  否则报错\nfunction fun({ a, b = 1 }) {\n  console.log(a + b);\n}\nfun(json);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("==数组的函数解构==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a = [1, 2, 3];\nfunction wgg(a, b, c) {\n  console.log(a, b, c); // 1 2 3\n}\nwgg(...a);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("==in 的用法==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('对象判断\n// in 判断对象里面是否有这个值\nlet obj = {\n  a: "技术胖",\n  b: "王哈哈哈"\n};\nconsole.log("a" in obj); // true\nconsole.log("c" in obj); // false\n\n数组判断\n// 先来看一下ES5判断的弊端，以前会使用length属性进行判断，为0表示没有数组元素。但是这并不准确，或者说真实开发中有弊端\n// 判断空位\nlet kong = [, , ,];\nconsole.log(1 in kong); // false 表示数组下标为1的地方没有这个值 为空\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("==数组的遍历方法==")]),s._v(" "),a("p",[s._v("1.forEach")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\narr.forEach((val,index)=>console.log(index,val));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("forEach 循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙")])]),s._v(" "),a("p",[s._v("2.filter")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\narr.filter(x=>console.log(x));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("3.some")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\narr.some(x=>console.log(x));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("4.map")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\nconsole.log(arr.map(x=>'web'));  // map在这里起到一个替换的作用\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("5.join()方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\nconsole.log(arr.join('|'));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("join()方法就是在数组元素中间，加了一些间隔，开发中很有用处。")])]),s._v(" "),a("p",[s._v("6.toString()方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr=['jspang','技术胖','前端教程'];\n\nconsole.log(arr.toString());  // 转换时只是是用逗号隔开了\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h5",{attrs:{id:"es6-中对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-中对象"}},[s._v("#")]),s._v(" ES6 中对象")]),s._v(" "),a("p",[s._v("==对象赋值==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let skill = "王";\nlet name = "念念";\nlet poi = { name, skill };\nconsole.log(poi); // {name: "念念", skill: "王"}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("==对象 Key 值构建==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let wen = "zekun";\nlet objj = {\n  [wen]: "wang"\n};\nconsole.log(objj); // {zekun: "wang"}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("==Object.is( ) 对象比较==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// === 同值相等  is严格相等\nconsole.log(+0 === -0); // true  都是0\nconsole.log(NaN === NaN); // false  不知道具体是哪一个对象\n\nconsole.log(Object.is(+0, -0)); // false  一个正  一个负\nconsole.log(Object.is(NaN, NaN)); // true  都是NaN\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("==Object.assign( )合并对象==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let a = { name: "王" };\nlet b = { sex: "女" };\nlet c = { age: "22" };\nlet d = Object.assign(a, b, c);\nconsole.log(d); // {name: "王", sex: "女", age: "22"}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h5",{attrs:{id:"symbol-在对象中的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-在对象中的作用"}},[s._v("#")]),s._v(" Symbol 在对象中的作用")]),s._v(" "),a("p",[s._v("==声明 Symbol==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = new String;\nvar b = new Number;\nvar c = new Boolean;\nvar d = new Array;\nvar e = new Object;\nvar f= Symbol();\nconsole.log(typeof(d));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("==Symbol 的打印==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var g = Symbol('jspang');\nconsole.log(g);\nconsole.log(g.toString());  // 没有toString的是红字，toString的是黑字\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("==Symbol 在对象中的应用==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var jspang = Symbol();\nvar obj={\n    [jspang]:'技术胖'\n}\nconsole.log(obj[jspang]);\nobj[jspang]='web';\nconsole.log(obj[jspang]);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("==Symbol 对象元素的保护作用==")]),s._v(" "),a("blockquote",[a("p",[s._v("在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用 Symbol 进行保护")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//没有进行保护的写法：\n\nvar obj={name:'jspang',skill:'web',age:18};\n\nfor (let item in obj){\n    console.log(obj[item]);\n}\n//现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。\n\nlet obj={name:'jspang',skill:'web'};\nlet age=Symbol();\nobj[age]=18;\nfor (let item in obj){\n    console.log(obj[item]);\n}\nconsole.log(obj);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h5",{attrs:{id:"set-和-weakset-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-和-weakset-数据结构"}},[s._v("#")]),s._v(" Set 和 WeakSet 数据结构")]),s._v(" "),a("p",[s._v("==Set 的声明==")]),s._v(" "),a("blockquote",[a("p",[s._v("set 不是数据类型，而是数据结构。它是 ES6 中新的东西，并且很有用处。Set 的数据结构是以数组的形式构建的。类似后端转给前端的 json 结构")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let setArry = new Set(["wang", "hha", "heihie"]);\nconsole.log(setArry); // Set(3) {"wang", "hha", "heihie"}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("==Set 值的增删查==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('setArry.add("前端"); // 追加方法\nconsole.log(setArry); // Set(4) {"wang", "hha", "heihie", "前端"}\nsetArry.delete("前端"); // 删除方法\nconsole.log(setArry); // Set(4) {"wang", "hha", "heihie"}\nconsole.log(setArry.has("前端")); // false  // 判断是否有这个字符\nsetArry.clear(); // 清除所有\nconsole.log(setArry); // Set{}\n\n// set的循环 for…of…循环\nlet arr = new Set(["1", "2", "34"]);\nfor (let item of arr) {\n  console.log(item); // 1  2 34\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("==size 属性==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let setArr = new Set(["wgg", "王果果", "web", "jspang"]);\nfor (let item of setArr) {\n  console.log(item); // 最后一个wgg没有打印出来  因为重复了\n}\nconsole.log(setArr.size); // 3\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("==WeakSet 的声明==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let weakObj = new WeakSet();  // 不能直接在里面面赋值对象  必须通过add的方法添加\nlet obj = { a: "wgg", b: "wnn" };\n// ==\nlet obj1 = obj;\nweakObj.add(obj);\nweakObj.add(obj1);\nconsole.log(weakObj);  // WeakSet {a: "wgg", b: "wnn"}\n// ====\nlet obj1 = { a: "wgg", b: "wnn" };  // 开辟了一个新的空间\nweakObj.add(obj);\nweakObj.add(obj1);\nconsole.log(weakObj);  // WeakSet {a: "wgg", b: "wnn",a: "wgg", b: "wnn"}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h5",{attrs:{id:"map-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-数据结构"}},[s._v("#")]),s._v(" map 数据结构")]),s._v(" "),a("blockquote",[a("p",[s._v("Map 的灵活性要更好，你可以把它看成一种特殊的键值对，但你的 key 可以设置成数组/对象，值也可以设置成字符串")])]),s._v(" "),a("p",[s._v("==Json 和 map 格式的对比==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 普通的json结构\nlet json = {\n  name: "wgg",\n  skill: "web"\n};\nconsole.log(json.name);\n// map 结构\nvar map = new Map();\nmap.set(json, "wgg");\nconsole.log(map); //  Map(1) {{name: "wgg", skill: "web"} => "wgg"}\nmap.set("wgg2", json);\nconsole.log(map); // Map(2) {{name: "wgg", skill: "web"} => "wgg", "wgg2" => {name: "wgg", skill: "web"}}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("==map 的增删查==")]),s._v(" "),a("blockquote",[a("p",[s._v("get size clear() delete() has")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// get取值\nconsole.log(map.get(json)); // wgg\nconsole.log(map.get("wgg2")); // {name: "wgg", skill: "web"}\n// 删除\nmap.delete(json);\nconsole.log(map); //  Map(1) {{"wgg2" => {name: "wgg", skill: "web"}}\nconsole.log(map.size); // map里面还剩下的个数 1\n\nmap.clear(); // 清除所有\nconsole.log(map.has("wgg2")); // true 查找方法  返回true or false\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h5",{attrs:{id:"用-proxy-进行预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-proxy-进行预处理"}},[s._v("#")]),s._v(" 用 Proxy 进行预处理")]),s._v(" "),a("p",[s._v("==声明 Proxy==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("new Proxy（{},{}）// 两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("==get 属性，set 属性，apply 的使用==")]),s._v(" "),a("blockquote",[a("p",[s._v("get 属性是在你得到某对象属性值时预处理的方法，他接受三个参数：target：得到的目标值；key：目标的 key 值，相当于对象的属性；property：这个不太常用，用法还在研究中，还请大神指教。")])]),s._v(" "),a("blockquote",[a("p",[s._v("set 属性是值你要改变 Proxy 属性值时，进行的预先处理。它接收四个参数。target:目标值；key：目标的 Key 值；value：要改变的值；receiver：改变前的原始值。")])]),s._v(" "),a("blockquote",[a("p",[s._v("apply 的作用是调用内部的方法，它使用在方法体是一个匿名函数时")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let pro = new Proxy(\n  {\n    add: function(val) {\n      return val + 1;\n    },\n    name: "my name is wgg"\n  },\n  {\n    get: function(target, key, property) {\n      console.log(target); // {name: "my name is wgg", add: ƒ}\n      console.log(key); // name\n      return target[key]; // my name is wgg\n    },\n    set: function(target, key, value, receiver) {\n      console.log(`setting ${key} = ${value}`); // setting name = 王果果啊\n      return (target[key] = value); // 必须得返回值\n    }\n  }\n);\nconsole.log(pro.name); // my name is wgg\npro.name = "王果果啊";\nconsole.log(pro.name); // 王果果啊\n\n// apply方法\nlet target = function() {\n  return "我叫王果果";\n};\nlet handel = {\n  apply(target, ctx, args) {\n    console.log("jinlail");\n    return Reflect.apply(...arguments); // 需要死记硬背\n  }\n};\nlet pRo = new Proxy(target, handel);\nconsole.log(pRo()); // 我叫王果果\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h5",{attrs:{id:"promise-对象的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-对象的使用"}},[s._v("#")]),s._v(" promise 对象的使用")]),s._v(" "),a("blockquote",[a("p",[s._v("这个过程是有一定的顺序的，你必须保证上一步完成，才能顺利进行下一步。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let state=1;\nfunction step1(resolve,reject){\n    console.log('1.开始-洗菜做饭');\n    if(state==1){\n        resolve('洗菜做饭--完成');\n    }else{\n        reject('洗菜做饭--出错');\n    }\n}\n\n\nfunction step2(resolve,reject){\n    console.log('2.开始-坐下来吃饭');\n    if(state==1){\n        resolve('坐下来吃饭--完成');\n    }else{\n        reject('坐下来吃饭--出错');\n    }\n}\n\n\nfunction step3(resolve,reject){\n    console.log('3.开始-收拾桌子洗完');\n     if(state==1){\n        resolve('收拾桌子洗完--完成');\n    }else{\n        reject('收拾桌子洗完--出错');\n    }\n}\n\nnew Promise(step1).then(function(val){\n    console.log(val);\n    return new Promise(step2);\n\n}).then(function(val){\n     console.log(val);\n    return new Promise(step3);\n}).then(function(val){\n    console.log(val);\n    return val;\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h5",{attrs:{id:"class-类的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-类的使用"}},[s._v("#")]),s._v(" class 类的使用")]),s._v(" "),a("p",[s._v("==类的声明==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Code{\n    name(val){\n        console.log(val);\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("==类的使用==")]),s._v(" "),a("blockquote",[a("p",[s._v("我们已经声明了一个类，并在类里声明了 name 方法，现在要实例化类，并使用类中的方法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 实例化类\nlet wgg = new Code;\nwgg.name("王欢欢"); // 王欢欢\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("==类的多方法声明==")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("注意：1.多个函数的时候不用打分号；2.必须加 return 否则下面函数引用的时候会报错 undefined")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Code {\n  name(val) {\n    console.log(val);\n    return val; // 必须加return 否则下面函数引用的时候会报错undefined\n  }\n  skill(val) {\n    console.log(this.name("王哈哈哈哈") + val); // 引用类里面的函数 王哈哈哈哈skill\n  }\n}\nlet wgg = new Code;\nwgg.name("王欢欢"); // 王欢欢\nwgg.skill("skill");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("==类的传参 constructor==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Code {\n  //   类传参\n  constructor(a, b) {\n    this.a = a; //类设置\n    this.b = b;\n  }\n\n  add() {\n    return this.a + this.b;\n  }\n}\n// 实例化类\nlet wgg = new Code(1, 2);\nconsole.log(wgg.add()); // 3 通过类传参\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("==class 的继承==")]),s._v(" "),a("blockquote",[a("p",[s._v("声明一个 Jichen 的新类并继承 Code 类，Jichen 新类里边为空，这时候我们实例化新类，并调用里边的 name 方法。结果也是可以调用到的。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Code {\n  name(val) {\n    // console.log(val);\n    return val; // 必须加return 否则下面函数引用的时候会报错undefined\n  } //多个函数的时候不用打分号\n  skill(val) {\n    console.log(this.name("王哈哈哈哈") + val); // 引用类里面的函数 王哈哈哈哈skill\n  }\n}\n// 用 extends 方法继承Code里面的函数\nclass Jichen extends Code {}\nlet gt = new Jichen();\ngt.name("继承"); //  继承\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);