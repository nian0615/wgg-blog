(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{388:function(e,t,r){"use strict";r.r(t);var a=r(43),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"vue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[e._v("#")]),e._v(" Vue")]),e._v(" "),r("h2",{attrs:{id:"_1-如何理解mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何理解mvvm"}},[e._v("#")]),e._v(" 1.如何理解MVVM")]),e._v(" "),r("p",[e._v("M指数据，V指视图，ViewModel是Vue.js的核心，一个实例。")]),e._v(" "),r("p",[e._v("MVVM是数据绑定的入口，整合了Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化通知视图更新的效果。利用视图交互，变化更新数据model变更的双向绑定效果。")]),e._v(" "),r("h2",{attrs:{id:"_2-vue的生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue的生命周期"}},[e._v("#")]),e._v(" 2.Vue的生命周期")]),e._v(" "),r("p",[e._v("简记：创建、载入、更新、销毁")]),e._v(" "),r("ul",[r("li",[e._v("beforeCreate/created\n"),r("ul",[r("li",[e._v("beforeCreated data是undefined，数据观测和初始化事件还没初始化")]),e._v(" "),r("li",[e._v("created： 数据观察者，属性和方法的运算，watch/event事件回调。挂载还没开始，$el属性目前不可见")])])]),e._v(" "),r("li",[e._v("beforeMount/mounted\n"),r("ul",[r("li",[e._v("beforeMount el和data初始化了，render函数首次调用。但是还没挂载DOM节点上")]),e._v(" "),r("li",[e._v("mounted  已经挂载到DOM节点了")])])]),e._v(" "),r("li",[e._v("beforeUpdate/updated\n"),r("ul",[r("li",[e._v("beforeUpdate（更新前）：在数据更新之前的调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。")]),e._v(" "),r("li",[e._v("updated（更新后）：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")])])]),e._v(" "),r("li",[e._v("beforeDestory/destroyed\n"),r("ul",[r("li",[e._v("beforeDestroy(销毁前）： 在实例销毁之前调用。实例仍然完全可用。")]),e._v(" "),r("li",[e._v("destroyed（销毁后） ：在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n"),r("a",{attrs:{href:"https://segmentfault.com/a/1190000016344599",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue面试中，经常会被问到的面试题/Vue知识点整理"),r("OutboundLink")],1)])])])]),e._v(" "),r("h2",{attrs:{id:"_3-如何实现数据双向绑定？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何实现数据双向绑定？"}},[e._v("#")]),e._v(" 3.如何实现数据双向绑定？")]),e._v(" "),r("p",[e._v("vue实现数据双向绑定主要是："),r("strong",[e._v("采用数据劫持结合发布者-订阅者模式")]),e._v("的方式，通过**Object.defineProperty()**来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。")]),e._v(" "),r("p",[e._v("vue将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令，最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —>视图更新；视图交互变化（input）—>数据model变更双向绑定效果。")]),e._v(" "),r("ul",[r("li",[e._v("Observer数据监听器：劫持监听所有属性")]),e._v(" "),r("li",[e._v("Compile指令解析器：对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数")]),e._v(" "),r("li",[e._v("Watcher:订阅属性变化的通知，绑定更新的函数")])]),e._v(" "),r("p",[r("img",{attrs:{src:"http://qiniu.hackslog.cn/blog/20190524/C2P5tcA3wN9e.png?imageslim",alt:"mark"}})]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[e._v("剖析vue原理，自己动手实现mvvm"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Object.defineProperty()"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day",target:"_blank",rel:"noopener noreferrer"}},[e._v("谈谈Javascript中的双向数据绑定"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现双向绑定Proxy比defineproperty优劣如何？"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"http://web.jobbole.com/94386/",target:"_blank",rel:"noopener noreferrer"}},[e._v("你能写一个Vue的双向数据绑定吗？"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000016231512",target:"_blank",rel:"noopener noreferrer"}},[e._v("AST"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"_4-路由的钩子函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-路由的钩子函数"}},[e._v("#")]),e._v(" 4.路由的钩子函数")]),e._v(" "),r("p",[e._v("全局路由守卫：befoeEach, beforeResolve,  afterEach")]),e._v(" "),r("p",[e._v("路由独享守卫：beforeEnter")]),e._v(" "),r("p",[e._v("组件级钩子： beforeRouteEnter, beforeRouteUpdate, beforeRouteLeave")]),e._v(" "),r("ul",[r("li",[e._v("to:即将要进入的路由对象")]),e._v(" "),r("li",[e._v("from:当前导航正要离开的路由")]),e._v(" "),r("li",[e._v("next:调用resolve方法")])]),e._v(" "),r("p",[e._v("完整的导航解析流程：")]),e._v(" "),r("ol",[r("li",[e._v("导航被触发。")]),e._v(" "),r("li",[e._v("在失活的组件里调用离开守卫。")]),e._v(" "),r("li",[e._v("调用全局的 "),r("code",[e._v("beforeEach")]),e._v(" 守卫。")]),e._v(" "),r("li",[e._v("在重用的组件里调用 "),r("code",[e._v("beforeRouteUpdate")]),e._v(" 守卫 (2.2+)。")]),e._v(" "),r("li",[e._v("在路由配置里调用 "),r("code",[e._v("beforeEnter")]),e._v("。")]),e._v(" "),r("li",[e._v("解析异步路由组件。")]),e._v(" "),r("li",[e._v("在被激活的组件里调用 "),r("code",[e._v("beforeRouteEnter")]),e._v("。")]),e._v(" "),r("li",[e._v("调用全局的 "),r("code",[e._v("beforeResolve")]),e._v(" 守卫 (2.5+)。")]),e._v(" "),r("li",[e._v("导航被确认。")]),e._v(" "),r("li",[e._v("调用全局的 "),r("code",[e._v("afterEach")]),e._v(" 钩子。")]),e._v(" "),r("li",[e._v("触发 DOM 更新。")]),e._v(" "),r("li",[e._v("用创建好的实例调用 "),r("code",[e._v("beforeRouteEnter")]),e._v(" 守卫中传给 "),r("code",[e._v("next")]),e._v(" 的回调函数。")])]),e._v(" "),r("h2",{attrs:{id:"_5-什么情况下使用computed、methods和watch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么情况下使用computed、methods和watch"}},[e._v("#")]),e._v(" 5.什么情况下使用computed、methods和watch?")]),e._v(" "),r("p",[e._v("计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。")]),e._v(" "),r("p",[e._v("只是需要动态值，那就用计算属性；需要知道值的改变后执行业务逻辑或者异步逻辑，才用 watch")]),e._v(" "),r("p",[e._v("computed有set和get两个选型,可以缓存，methods不行")]),e._v(" "),r("p",[e._v("methods可以接收参数，computed不行")]),e._v(" "),r("p",[e._v("执行异步开销比较大时可以考虑用watch")]),e._v(" "),r("h2",{attrs:{id:"_6-怎么理解虚拟dom和template？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-怎么理解虚拟dom和template？"}},[e._v("#")]),e._v(" 6.怎么理解虚拟DOM和template？")]),e._v(" "),r("p",[e._v("template首先转化为AST，然后通过render函数进行渲染返回VNode")]),e._v(" "),r("ol",[r("li",[e._v("通过compile编译器把template编译成AST，compile是createCompiler的返回值，createCompiler用来创建编译器")]),e._v(" "),r("li",[e._v("AST会经过generate得到render函数，render的返回值是VNode，VNode是Vue.js的虚拟节点")])]),e._v(" "),r("h2",{attrs:{id:"_7-如何自定义指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何自定义指令"}},[e._v("#")]),e._v(" 7.如何自定义指令")]),e._v(" "),r("p",[e._v("directive方法，钩子函数如下：")]),e._v(" "),r("ul",[r("li",[e._v("bind 在指令第一次绑定到元素时调用")]),e._v(" "),r("li",[e._v("inserted： 在被绑定元素插入父节点时调用")]),e._v(" "),r("li",[e._v("update: 在组件的VNode更新时调用")]),e._v(" "),r("li",[e._v("componenentUpdated:在指令所在的组件VNode以及其子VNode全部更新后调用")]),e._v(" "),r("li",[e._v("unbind： 解绑时调用")])]),e._v(" "),r("p",[e._v("参数：")]),e._v(" "),r("ul",[r("li",[e._v("el： 指令所绑定的元素")]),e._v(" "),r("li",[e._v("binding： 指令对象")]),e._v(" "),r("li",[e._v("vnode： 虚拟节点")]),e._v(" "),r("li",[e._v("oldVnode上一个虚拟节点")])]),e._v(" "),r("p",[e._v("1.局部指令")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var app = new Vue({\n    el: '#app',\n    data: {    \n    },\n    // 创建指令(可以多个)\n    directives: {\n        // 指令名称\n        dir1: {\n            inserted(el) {\n                // 指令中第一个参数是当前使用指令的DOM\n                console.log(el);\n                console.log(arguments);\n                // 对DOM进行操作\n                el.style.width = '200px';\n                el.style.height = '200px';\n                el.style.background = '#000';\n            }\n        }\n    }\n})\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br"),r("span",{staticClass:"line-number"},[e._v("18")]),r("br"),r("span",{staticClass:"line-number"},[e._v("19")]),r("br"),r("span",{staticClass:"line-number"},[e._v("20")]),r("br")])]),r("p",[e._v("2.全局指令")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" Vue.directives('change', {\n     bind: funciton(el, bindings){\n         //首次调用\n     },\n     update: funciton(el, bindings){\n         //只要数据由变化都会调用\n     },\n     unbind: function(){\n         //解绑的时候调用\n     }\n })\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br")])]),r("h2",{attrs:{id:"_8-什么是虚拟dom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是虚拟dom"}},[e._v("#")]),e._v(" 8.什么是虚拟DOM")]),e._v(" "),r("p",[e._v("虚拟DOM是用JavaScript对象对真实DOM进行抽象")]),e._v(" "),r("h2",{attrs:{id:"_9-vue自定义一个过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue自定义一个过滤器"}},[e._v("#")]),e._v(" 9.Vue自定义一个过滤器")]),e._v(" "),r("p",[e._v("过滤器的本质是带有返回值的方法，可以用来对数据进行筛选、过滤和格式化等。")]),e._v(" "),r("p",[e._v("html代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<div id="app">\n     <input type="text" v-model="msg" />\n     '+e._s(e._f("capitalize")(e.msg))+"\n</div>\n")])])]),r("p",[e._v("JS代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("var vm=new Vue({\n    el:\"#app\",\n    data:{\n        msg:''\n    },\n    filters: {\n      capitalize: function (value) {\n        if (!value) return ''\n        value = value.toString()\n        return value.charAt(0).toUpperCase() + value.slice(1)\n      }\n    }\n})\n")])])]),r("p",[e._v("全局定义过滤器")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Vue.filter('capitalize', function (value) {\n  if (!value) return ''\n  value = value.toString()\n  return value.charAt(0).toUpperCase() + value.slice(1)\n})\n")])])]),r("p",[e._v("过滤器接收表达式的值 (msg) 作为第一个参数。capitalize 过滤器将会收到 msg的值作为第一个参数。")]),e._v(" "),r("h2",{attrs:{id:"_10-vuex"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-vuex"}},[e._v("#")]),e._v(" 10.Vuex")]),e._v(" "),r("p",[e._v("将数据集中放在store中，改变数据用mutations,异步逻辑用actions")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://qiniu.hackslog.cn/18-11-19/63524550.jpg",alt:"vuex"}})]),e._v(" "),r("ul",[r("li",[e._v("state  保存数据")]),e._v(" "),r("li",[e._v("mutations:分模块")]),e._v(" "),r("li",[e._v("getters")]),e._v(" "),r("li",[e._v("actions")])]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const store = new Vuex.Store({ //store实例\n      state: {\n         count: 0\n             },\n      mutations: {                \n         increment (state) {\n          state.count++\n         }\n          },\n      actions: { \n         increment (context) {\n          context.commit('increment')\n   }\n }\n})\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br")])]),r("h2",{attrs:{id:"_11-vue-mixin-的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-vue-mixin-的使用"}},[e._v("#")]),e._v(" 11.Vue mixin 的使用")]),e._v(" "),r("h2",{attrs:{id:"_20-vue项目打包优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue项目打包优化"}},[e._v("#")]),e._v(" 20.Vue项目打包优化")]),e._v(" "),r("p",[e._v("方法：\nVue Router 懒加载\nCDN引入依赖\n第三方库按需引入\n开启Gzip\n关闭生产环境sourceMap")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://qiniu.hackslog.cn/blog/20190522/nTfGskQoEkIh.png?imageslim",alt:"mark"}})]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/entry/5c170fd5e51d452b3e135aa4#top",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue-cli全面配置"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5b97b84ee51d450e6c7492f6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue CLI项目优化实战——CDN+gzip+Prerender"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.jsdelivr.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jsdelivr"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://webpack.docschina.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"}},[e._v("externals"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://webpack.docschina.org/plugins/html-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HtmlWebpackPlugin"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://echi1993.github.io/2019/04/21/%E5%85%B3%E4%BA%8Evue-cli-3%E9%85%8D%E7%BD%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E8%A6%81%E7%82%B9/",target:"_blank",rel:"noopener noreferrer"}},[e._v("关于vue-cli3配置打包优化要点"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML和静态资源"),r("OutboundLink")],1)]),e._v(" "),r("li")]),e._v(" "),r("h2",{attrs:{id:"_100-nuxt-js的工作过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_100-nuxt-js的工作过程"}},[e._v("#")]),e._v(" 100.Nuxt.js的工作过程")]),e._v(" "),r("p",[e._v("当你访问一个基于Nuxt.js构建的页面时，发生了的事情如下：")]),e._v(" "),r("ol",[r("li",[e._v("当用户访问应用程序, 如果store中定义了 "),r("a",{attrs:{href:"https://nuxtjs.org/guide/vuex-store/#the-nuxtserverinit-action",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("nuxtServerInit")]),e._v(" action"),r("OutboundLink")],1),e._v("，Nuxt.js将调用它更新store。")]),e._v(" "),r("li",[e._v("接下来，将加载即将访问页面所依赖的任何"),r("a",{attrs:{href:"https://nuxtjs.org/guide/routing/#middleware",target:"_blank",rel:"noopener noreferrer"}},[e._v("中间件"),r("OutboundLink")],1),e._v("。Nuxt首先从"),r("code",[e._v("nuxt.config.js")]),e._v("这个文件中，加载全局依赖的中间件，之后检测每个相应页面对应的"),r("a",{attrs:{href:"https://nuxtjs.org/guide/views#layouts",target:"_blank",rel:"noopener noreferrer"}},[e._v("布局文件"),r("OutboundLink")],1),e._v(" ，最后，检测布局文件下子组件依赖的中间件。以上是中间件的加载顺序。")]),e._v(" "),r("li",[e._v("如果要访问的路由是一个动态路由, 且有一个相应的 "),r("code",[e._v("validate()")]),e._v(" 方法"),r("a",{attrs:{href:"https://nuxtjs.org/api/pages-validate",target:"_blank",rel:"noopener noreferrer"}},[e._v("路由的validate 方法"),r("OutboundLink")],1),e._v("，将进行路由校验。")]),e._v(" "),r("li",[e._v("之后, Nuxt.js 调用 "),r("code",[e._v("asyncData()")]),e._v(" 和 "),r("code",[e._v("fetch()")]),e._v(" 方法，在渲染页面之前加载异步数据。"),r("a",{attrs:{href:"https://nuxtjs.org/guide/async-data/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("asyncData()")]),e._v(" "),r("OutboundLink")],1),e._v("方法用于异步获取数据，并将fetch回来的数据，在服务端渲染到页面。 用"),r("a",{attrs:{href:"https://nuxtjs.org/api/pages-fetch/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("fetch()")]),r("OutboundLink")],1),e._v(" 方法取回的将数据在渲染页面之前填入store。")]),e._v(" "),r("li",[e._v("最后一步, 将所有数据渲染到页面。")])]),e._v(" "),r("p",[e._v("下图阐述了 Nuxt.js 应用一个完整的服务器请求到渲染的流程:")]),e._v(" "),r("p",[e._v("参考："),r("a",{attrs:{href:"https://www.w3ctech.com/topic/2067",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js应用框架Nuxt.js"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("KeepAlive的属性\n封装Swiper，点击的时候停止，放开自动播放。\ndeep，修改样式\nCSS自动跟随  Sticky属性\n封装图片验证码\nbase64\naxios接口设计\nH5下拉自动显示的效果\nwebsocket\n视觉日记\n页面间交换数据\n智慧找房\ngitblog登录请求数据的错误")])])}),[],!1,null,null,null);t.default=n.exports}}]);